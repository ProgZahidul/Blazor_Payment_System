@page "/feelist"
@inject FeeTypeService FeeTypeService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h1>Fee List</h1>
<NavLink href="createfee">Create Fee</NavLink>

@if (feeTypes == null)
{
    <p>Loading...</p>
}
else if (feeTypes.Count == 0)
{
    <p>No fees found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Fee Type ID</th>
                <th>Fee Type Name</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var feeType in feeTypes)
            {
                <tr>
                    <td>@feeType.FeeTypeId</td>
                    <td>@feeType.TypeName</td>
                    <td><button class="btn btn-primary" @onclick="()=>EditFee(feeType.FeeTypeId)">Edit</button></td>
                    <td><button class="btn btn-danger" @onclick="()=>DeleteFee(feeType.FeeTypeId)">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<FeeType> feeTypes;

    protected override async Task OnInitializedAsync()
    {
        feeTypes = await FeeTypeService.GetFeeTypesAsync();
    }

    private void EditFee(int feeTypeId)
    {
        NavigationManager.NavigateTo($"/editfee/{feeTypeId}");
    }

    private async Task DeleteFee(int feeTypeId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this fee type?");
        if (confirmed)
        {
            try
            {
                await FeeTypeService.DeleteFeeTypeAsync(feeTypeId);
                feeTypes.RemoveAll(f => f.FeeTypeId == feeTypeId);
            }
            catch (Exception ex)
            {
                // Handle error
                Console.WriteLine($"Error deleting fee type: {ex.Message}");
            }
        }
    }
}
